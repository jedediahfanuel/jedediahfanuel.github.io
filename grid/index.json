{"repository_name":"grid","body":"# grid\n\nA simple string grid formatter library for crystal programming language.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     grid:\n       github: Jeddi212/grid\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"grid\"\n\ngrid = Grid.new(\"Rubys Crystals Emeralds Sapphires a b\") # Create a new Grid instance\n\ngrid.virtual_generate(18, true) # generate top-down grid with 18 char as max canvas width\ngrid.to_s(true) # get the string format (true) in top-down direction\n# Rubys    Sapphires\n# Crystals a        \n# Emeralds b        \n\ngrid.virtual_generate(18, false) # generate left-right grid with 18 char as max canvas width\ngrid.to_s(false) # get the string format (false) in left-right direction\n# Rubys    Crystals \n# Emeralds Sapphires\n# a        b\n\ngrid.to_s(true, false, '|') # get the string format (true) in top-down direction\n#    Rubys|Sapphires\n# Crystals|        a\n# Emeralds|        b\n\n```\n\nFor detailed api, check [grid docs](https://jeddi212.github.io/grid/).\n\n## Development\n\nWork in progress\n\n- [x] Auto grid\n\n- [x] Direction\n\n   - [x] top-down\n   - [x] left-right\n   \n- [ ] Custom header\n\n- [ ] Manual grid \n\n      - [ ] col & row size\n      - [ ] col width\n      - [ ] elipsis\n      - [ ] pass through\n\n## Contributing\n\n1. Fork it (<https://github.com/Jeddi212/grid/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Jeddi212](https://github.com/Jeddi212) - creator and maintainer\n\n<hr>\n\n![Jeddi's Profile Views](https://api.visitorbadge.io/api/visitors?path=https%3A%2F%2Fgithub.com%2FJeddi212&countColor=%23fce775&style=flat-square)\n","program":{"html_id":"grid/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"grid","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"grid/Grid","path":"Grid.html","kind":"struct","full_name":"Grid","name":"Grid","abstract":false,"superclass":{"html_id":"grid/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"grid/TopDown","kind":"module","full_name":"TopDown","name":"TopDown"},{"html_id":"grid/LeftRight","kind":"module","full_name":"LeftRight","name":"LeftRight"},{"html_id":"grid/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"grid/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"grid/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/grid.cr","line_number":28,"url":null}],"repository_name":"grid","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.1\""}],"included_modules":[{"html_id":"grid/LeftRight","kind":"module","full_name":"LeftRight","name":"LeftRight"},{"html_id":"grid/TopDown","kind":"module","full_name":"TopDown","name":"TopDown"}],"doc":"`Grid` is a simple string grid formatter library for crystal programming language.\n\nExample:\n\n```\ngrid = Grid.new(\"Rubys Crystals Emeralds Sapphires a b\") # Create a new Grid instance\n\ngrid.virtual_generate(18, true) # generate top-down grid with 18 char as max canvas width\ngrid.to_s(true) # get the string format (true) in top-down direction\n# Rubys    Sapphires\n# Crystals a        \n# Emeralds b        \n\ngrid.virtual_generate(18, false) # generate left-right grid with 18 char as max canvas width\ngrid.to_s(false) # get the string format (false) in left-right direction\n# Rubys    Crystals \n# Emeralds Sapphires\n# a        b\n\ngrid.to_s(true, false, '|') # get the string format (true) in top-down direction\n#    Rubys|Sapphires\n# Crystals|        a\n# Emeralds|        b\n```","summary":"<p><code><a href=\"Grid.html\">Grid</a></code> is a simple string grid formatter library for crystal programming language.</p>","constructors":[{"html_id":"new(list:Array(String))-class-method","name":"new","doc":"Initialize grid *list* with type of `Array(String)` as a input parameter.\nExample:\n\n```\ngrid = Grid.new([\"Ruby\", \"Crystal\", \"Emerald\", \"Sapphire\"])\ngrid = Grid.new() # produce empty string\ngrid = Grid.new() # produce empty list\n```","summary":"<p>Initialize grid <em>list</em> with type of <code>Array(String)</code> as a input parameter.</p>","abstract":false,"args":[{"name":"list","external_name":"list","restriction":"Array(String)"}],"args_string":"(list : Array(String))","args_html":"(list : Array(String))","location":{"filename":"src/grid.cr","line_number":76,"url":null},"def":{"name":"new","args":[{"name":"list","external_name":"list","restriction":"Array(String)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(list)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(str=\"\")-class-method","name":"new","doc":"Initialize grid *list* with type of `String` as a input parameter.\n\nExample:\n```\ngrid = Grid.new(\"Ruby Crystal Emerald Sapphire\")\ngrid = Grid.new() # produce empty list\n```","summary":"<p>Initialize grid <em>list</em> with type of <code>String</code> as a input parameter.</p>","abstract":false,"args":[{"name":"str","default_value":"\"\"","external_name":"str","restriction":""}],"args_string":"(str = \"\")","args_html":"(str = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/grid.cr","line_number":86,"url":null},"def":{"name":"new","args":[{"name":"str","default_value":"\"\"","external_name":"str","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(str)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"delimiter_count_of(col_count:Int32):Int32-instance-method","name":"delimiter_count_of","doc":"Count the delimiter of specified column count.\n\nExample:\n```\ndelimiter_count_of(3) # => 2\ndelimiter_count_of(7) # => 6\n```","summary":"<p>Count the delimiter of specified column count.</p>","abstract":false,"args":[{"name":"col_count","external_name":"col_count","restriction":"Int32"}],"args_string":"(col_count : Int32) : Int32","args_html":"(col_count : Int32) : Int32","location":{"filename":"src/grid.cr","line_number":100,"url":null},"def":{"name":"delimiter_count_of","args":[{"name":"col_count","external_name":"col_count","restriction":"Int32"}],"return_type":"Int32","visibility":"Public","body":"col_count < 1 ? 0 : col_count - 1"}},{"html_id":"list:Array(String)-instance-method","name":"list","doc":"Holds the list of String from the user.\n\nExample:\n```\ngrid = grid.new(\"str_1 str_2 str_3\")\ngrid.list # => [\"str_1\", \"str_2\", \"str_3\"]\n```","summary":"<p>Holds the list of String from the user.</p>","abstract":false,"location":{"filename":"src/grid.cr","line_number":43,"url":null},"def":{"name":"list","return_type":"Array(String)","visibility":"Public","body":"@list"}},{"html_id":"list=(str:String)-instance-method","name":"list=","doc":"Set the list from a string.\n\nExample:\n```\ngrid = grid.new(\"\")\ngrid.list = \"str_1 str_2 str_3\"\ngrid.list # => [\"str_1\", \"str_2\", \"str_3\"]\n```","summary":"<p>Set the list from a string.</p>","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"}],"args_string":"(str : String)","args_html":"(str : String)","location":{"filename":"src/grid.cr","line_number":53,"url":null},"def":{"name":"list=","args":[{"name":"str","external_name":"str","restriction":"String"}],"visibility":"Public","body":"@list = str.strip.split"}},{"html_id":"list=(list:Array(String))-instance-method","name":"list=","doc":"Set the list from an Array().\n\nExample:\n```\ngrid = grid.new(\"\")\ngrid.list = [\"str_1\", \"str_2\", \"str_3\"]\ngrid.list # => [\"str_1\", \"str_2\", \"str_3\"]\n```","summary":"<p>Set the list from an Array().</p>","abstract":false,"args":[{"name":"list","external_name":"list","restriction":"Array(String)"}],"args_string":"(list : Array(String))","args_html":"(list : Array(String))","location":{"filename":"src/grid.cr","line_number":65,"url":null},"def":{"name":"list=","args":[{"name":"list","external_name":"list","restriction":"Array(String)"}],"visibility":"Public","body":"@list = list"}},{"html_id":"max_width:Int32-instance-method","name":"max_width","doc":"Holds the max width of the canvas.\nIts defined by the user.\nDefault value is `24`.","summary":"<p>Holds the max width of the canvas.</p>","abstract":false,"location":{"filename":"src/grid.cr","line_number":34,"url":null},"def":{"name":"max_width","visibility":"Public","body":"@max_width"}},{"html_id":"max_width=(max_width:Int32)-instance-method","name":"max_width=","doc":"Holds the max width of the canvas.\nIts defined by the user.\nDefault value is `24`.","summary":"<p>Holds the max width of the canvas.</p>","abstract":false,"args":[{"name":"max_width","external_name":"max_width","restriction":"::Int32"}],"args_string":"(max_width : Int32)","args_html":"(max_width : Int32)","location":{"filename":"src/grid.cr","line_number":34,"url":null},"def":{"name":"max_width=","args":[{"name":"max_width","external_name":"max_width","restriction":"::Int32"}],"visibility":"Public","body":"@max_width = max_width"}},{"html_id":"to_s(top_down=true,align_left=true,separator:Char=''):String-instance-method","name":"to_s","doc":"Convert all elements in *canvas* to a single string using `String#build`.\nThe first parameter *top_down* default is true.\nThe second parameter *align_left* default is true\nThe third parameter *separator* default is ' ' (single space)\n\nExample:\n\n```\ngrid = Grid.new(\"Rubys Crystals Emeralds Sapphires a b\") # Create a new Grid instance\n\ngrid.virtual_generate(18, true) # generate top-down grid with 18 char as max canvas width\n# => [[\"Rubys\", \"Crystals\", \"Emeralds\"], [\"Sapphires\", \"a\", \"b\"]]\n\ngrid.to_s(true) # get the string format (true) in top-down direction\n# Rubys    Sapphires\n# Crystals a        \n# Emeralds b        \n\ngrid.to_s(true, false)\n#    Rubys Sapphires\n# Crystals         a\n# Emeralds         b\n\ngrid.to_s(true, true, '|')\n# Rubys   |Sapphires\n# Crystals|a        \n# Emeralds|b        \n\ngrid.virtual_generate(18, false) # generate left-right grid with 18 char as max canvas width\n# => [[\"Rubys\", \"Crystals\"], [\"Emeralds\", \"Sapphires\"], [\"a\", \"b\"]]\n\ngrid.to_s(false) # get the string format (false) in left-right direction\n# Rubys    Crystals \n# Emeralds Sapphires\n# a        b\n\ngrid.to_s(false, false)\n#    Rubys  Crystals\n# Emeralds Sapphires\n#        a         b\n\ngrid.to_s(false, false, '|')\n   Rubys| Crystals\nEmeralds|Sapphires\n       a|        b\n```","summary":"<p>Convert all elements in <em>canvas</em> to a single string using <code>String#build</code>.</p>","abstract":false,"args":[{"name":"top_down","default_value":"true","external_name":"top_down","restriction":""},{"name":"align_left","default_value":"true","external_name":"align_left","restriction":""},{"name":"separator","default_value":"' '","external_name":"separator","restriction":"Char"}],"args_string":"(top_down = true, align_left = true, separator : Char = ' ') : String","args_html":"(top_down = <span class=\"n\">true</span>, align_left = <span class=\"n\">true</span>, separator : Char = <span class=\"s\">&#39; &#39;</span>) : String","location":{"filename":"src/grid.cr","line_number":150,"url":null},"def":{"name":"to_s","args":[{"name":"top_down","default_value":"true","external_name":"top_down","restriction":""},{"name":"align_left","default_value":"true","external_name":"align_left","restriction":""},{"name":"separator","default_value":"' '","external_name":"separator","restriction":"Char"}],"return_type":"String","visibility":"Public","body":"String.build do |io|\n  if top_down\n    if @canvas_td.empty?\n      return \"\"\n    end\n    @canvas_td.first.size.times do |row|\n      @col_width_td.each_with_index do |w, col|\n        if @canvas_td[col][row]?\n        else\n          next\n        end\n        io << (align_left ? @canvas_td[col][row].ljust(w, ' ') : @canvas_td[col][row].rjust(w, ' '))\n        if col < (@col_width_td.size - 1)\n          io << separator\n        end\n      end\n      io << \"\\n\"\n    end\n  else\n    if @canvas_lr.empty?\n      return \"\"\n    end\n    @canvas_lr.each do |row|\n      row.each_with_index do |str, i|\n        io << (align_left ? str.ljust(@col_width_lr[i], ' ') : str.rjust(@col_width_lr[i], ' '))\n        if i < (row.size - 1)\n          io << separator\n        end\n      end\n      io << \"\\n\"\n    end\n  end\nend"}},{"html_id":"virtual_generate(max_w:Int32=24,top_down=true)-instance-method","name":"virtual_generate","doc":"Generate the virtual canvas based on the current @list and specified *max width*.\nThe max width default value is 24.\nThe second parameter *top_down* specified the direction of item. True if top-down and false if left-right.\n\nExample:\n```\ngrid = Grid.new(\"Rubys Crystals Emeralds Sapphires a b\") # Create a new Grid instance\n\ngrid.virtual_generate(18, true) # generate top-down grid with 18 char as max canvas width    \n# => [[\"Rubys\", \"Crystals\", \"Emeralds\"], [\"Sapphires\", \"a\", \"b\"]]\n\ngrid.virtual_generate(18, false) # generate left-right grid with 18 char as max canvas width\n# => [[\"Rubys\", \"Crystals\"], [\"Emeralds\", \"Sapphires\"], [\"a\", \"b\"]]\n```","summary":"<p>Generate the virtual canvas based on the current @list and specified <em>max width</em>.</p>","abstract":false,"args":[{"name":"max_w","default_value":"24","external_name":"max_w","restriction":"::Int32"},{"name":"top_down","default_value":"true","external_name":"top_down","restriction":""}],"args_string":"(max_w : Int32 = 24, top_down = true)","args_html":"(max_w : Int32 = <span class=\"n\">24</span>, top_down = <span class=\"n\">true</span>)","location":{"filename":"src/grid.cr","line_number":189,"url":null},"def":{"name":"virtual_generate","args":[{"name":"max_w","default_value":"24","external_name":"max_w","restriction":"::Int32"},{"name":"top_down","default_value":"true","external_name":"top_down","restriction":""}],"visibility":"Public","body":"@max_width = max_w\ntop_down ? virtual_top_down : virtual_left_right\n"}}]},{"html_id":"grid/LeftRight","path":"LeftRight.html","kind":"module","full_name":"LeftRight","name":"LeftRight","abstract":false,"locations":[{"filename":"src/left_right.cr","line_number":1,"url":null}],"repository_name":"grid","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"grid/Grid","kind":"struct","full_name":"Grid","name":"Grid"}],"instance_methods":[{"html_id":"canvas_lr-instance-method","name":"canvas_lr","doc":"Canvas is a variable that holds the cell of each string in grid format.\nIn @canvas_ld, each element in the array is representing a row.\n\nExample:\n```\n@canvas_lr = [[\"Rubys\", \"Crystals\"], [\"Emeralds\", \"Sapphires\"], [\"a\", \"b\"]]\n\n# It is Left-Right\n# Rubys    Crystals \n# Emeralds Sapphires\n# a        b  \n```","summary":"<p>Canvas is a variable that holds the cell of each string in grid format.</p>","abstract":false,"location":{"filename":"src/left_right.cr","line_number":14,"url":null},"def":{"name":"canvas_lr","visibility":"Public","body":"@canvas_lr"}},{"html_id":"canvas_lr=(canvas_lr)-instance-method","name":"canvas_lr=","doc":"Canvas is a variable that holds the cell of each string in grid format.\nIn @canvas_ld, each element in the array is representing a row.\n\nExample:\n```\n@canvas_lr = [[\"Rubys\", \"Crystals\"], [\"Emeralds\", \"Sapphires\"], [\"a\", \"b\"]]\n\n# It is Left-Right\n# Rubys    Crystals \n# Emeralds Sapphires\n# a        b  \n```","summary":"<p>Canvas is a variable that holds the cell of each string in grid format.</p>","abstract":false,"args":[{"name":"canvas_lr","external_name":"canvas_lr","restriction":""}],"args_string":"(canvas_lr)","args_html":"(canvas_lr)","location":{"filename":"src/left_right.cr","line_number":14,"url":null},"def":{"name":"canvas_lr=","args":[{"name":"canvas_lr","external_name":"canvas_lr","restriction":""}],"visibility":"Public","body":"@canvas_lr = canvas_lr"}},{"html_id":"col_width_lr-instance-method","name":"col_width_lr","doc":"Holds curently max width for every column.\n\nExample:\n```\n@canvas_lr = [[\"Rubys\", \"Crystals\"], [\"Emeralds\", \"Sapphires\"], [\"a\", \"b\"]]\n@col_width_lr = [8, 9]\n\n# => 1st column width is 6 char\n# => 2nd column width is 7 char\n# => 3rd column width is 9 char\n```","summary":"<p>Holds curently max width for every column.</p>","abstract":false,"location":{"filename":"src/left_right.cr","line_number":27,"url":null},"def":{"name":"col_width_lr","visibility":"Public","body":"@col_width_lr"}},{"html_id":"col_width_lr=(col_width_lr)-instance-method","name":"col_width_lr=","doc":"Holds curently max width for every column.\n\nExample:\n```\n@canvas_lr = [[\"Rubys\", \"Crystals\"], [\"Emeralds\", \"Sapphires\"], [\"a\", \"b\"]]\n@col_width_lr = [8, 9]\n\n# => 1st column width is 6 char\n# => 2nd column width is 7 char\n# => 3rd column width is 9 char\n```","summary":"<p>Holds curently max width for every column.</p>","abstract":false,"args":[{"name":"col_width_lr","external_name":"col_width_lr","restriction":""}],"args_string":"(col_width_lr)","args_html":"(col_width_lr)","location":{"filename":"src/left_right.cr","line_number":27,"url":null},"def":{"name":"col_width_lr=","args":[{"name":"col_width_lr","external_name":"col_width_lr","restriction":""}],"visibility":"Public","body":"@col_width_lr = col_width_lr"}},{"html_id":"virtual_column_width_lr(row_size:Int32):Array(Int32)-instance-method","name":"virtual_column_width_lr","doc":"Calculate each column width for canvas with virtually row item of *row_size*.\n\nReturning the width of every column in type Array(Int32)\n\nExample:\n```\n@list = [\n  \"str_1\",\n  \"str_30\",\n  \"str_200\",\n  \"str_4000\",\n  \"str_50000\",\n]\nvirtual_column_width_lr(3) # => [8, 9, 7]\n\n# Virtual column would be like\n# str_1    str_30    str_200\n# str_4000 str_50000\n\nvirtual_column_width_lr(2) # => [9, 8]\n\n# Virtual column would be like\n# str_1     str_30\n# str_200   str_4000\n# str_50000\n```","summary":"<p>Calculate each column width for canvas with virtually row item of <em>row_size</em>.</p>","abstract":false,"args":[{"name":"row_size","external_name":"row_size","restriction":"Int32"}],"args_string":"(row_size : Int32) : Array(Int32)","args_html":"(row_size : Int32) : Array(Int32)","location":{"filename":"src/left_right.cr","line_number":55,"url":null},"def":{"name":"virtual_column_width_lr","args":[{"name":"row_size","external_name":"row_size","restriction":"Int32"}],"return_type":"Array(Int32)","visibility":"Public","body":"ary = (@list.each_slice(row_size)).reduce(Array(Int32).new(row_size, 0)) do |memo, row|\n  memo.map_with_index do |n, i|\n    row[i]? ? row[i].size > n ? row[i].size : n : n\n  end\nend\nreturn ary\n"}},{"html_id":"virtual_one_column_lr:Array(Array(String))-instance-method","name":"virtual_one_column_lr","doc":"Return canvas with the size of one column.\nIts set @canvas_lr and calculate the @col_width_lr\n\nExample:\n```\n@list = [\n  \"str_1\",\n  \"str_30\",\n  \"str_200\",\n  \"str_4000\",\n  \"str_50000\",\n]\nvirtual_one_column_lr # => [[\"str_1\"], [\"str_30\"], [\"str_200\"], [\"str_4000\"], [\"str_50000\"]]\n```","summary":"<p>Return canvas with the size of one column.</p>","abstract":false,"location":{"filename":"src/left_right.cr","line_number":79,"url":null},"def":{"name":"virtual_one_column_lr","return_type":"Array(Array(String))","visibility":"Public","body":"cw = @list.max_of?(&.size)\n@col_width_lr = cw ? [cw] : @col_width_lr.clear\n@canvas_lr.clear\n@canvas_lr = @list.map do |row|\n  [row]\nend\n"}}]},{"html_id":"grid/TopDown","path":"TopDown.html","kind":"module","full_name":"TopDown","name":"TopDown","abstract":false,"locations":[{"filename":"src/top_down.cr","line_number":1,"url":null}],"repository_name":"grid","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"grid/Grid","kind":"struct","full_name":"Grid","name":"Grid"}],"instance_methods":[{"html_id":"canvas_td-instance-method","name":"canvas_td","doc":"Canvas is a variable that holds the cell of each string in grid format.\nIn @canvas_td, each element in the array is representing a column.\n\nExample:\n```\n@canvas_td = [[\"Rubys\", \"Crystals\", \"Emeralds\"], [\"Sappgires\", \"a\", \"b\"]]\n\n# It is Top-Down\n# Rubys    Sappgires\n# Crystals a        \n# Emeralds b        \n```","summary":"<p>Canvas is a variable that holds the cell of each string in grid format.</p>","abstract":false,"location":{"filename":"src/top_down.cr","line_number":14,"url":null},"def":{"name":"canvas_td","visibility":"Public","body":"@canvas_td"}},{"html_id":"canvas_td=(canvas_td)-instance-method","name":"canvas_td=","doc":"Canvas is a variable that holds the cell of each string in grid format.\nIn @canvas_td, each element in the array is representing a column.\n\nExample:\n```\n@canvas_td = [[\"Rubys\", \"Crystals\", \"Emeralds\"], [\"Sappgires\", \"a\", \"b\"]]\n\n# It is Top-Down\n# Rubys    Sappgires\n# Crystals a        \n# Emeralds b        \n```","summary":"<p>Canvas is a variable that holds the cell of each string in grid format.</p>","abstract":false,"args":[{"name":"canvas_td","external_name":"canvas_td","restriction":""}],"args_string":"(canvas_td)","args_html":"(canvas_td)","location":{"filename":"src/top_down.cr","line_number":14,"url":null},"def":{"name":"canvas_td=","args":[{"name":"canvas_td","external_name":"canvas_td","restriction":""}],"visibility":"Public","body":"@canvas_td = canvas_td"}},{"html_id":"col_width_td-instance-method","name":"col_width_td","doc":"Holds curently max width for every column.\n\nExample:\n```\n@canvas_td = [[\"Rubys\", \"Crystals\", \"Emeralds\"], [\"Sappgires\", \"a\", \"b\"]]\n@col_width_td = [8, 9]\n\n# => 1st column width is 6 char\n# => 2nd column width is 7 char\n# => 3rd column width is 9 char\n```","summary":"<p>Holds curently max width for every column.</p>","abstract":false,"location":{"filename":"src/top_down.cr","line_number":27,"url":null},"def":{"name":"col_width_td","visibility":"Public","body":"@col_width_td"}},{"html_id":"col_width_td=(col_width_td)-instance-method","name":"col_width_td=","doc":"Holds curently max width for every column.\n\nExample:\n```\n@canvas_td = [[\"Rubys\", \"Crystals\", \"Emeralds\"], [\"Sappgires\", \"a\", \"b\"]]\n@col_width_td = [8, 9]\n\n# => 1st column width is 6 char\n# => 2nd column width is 7 char\n# => 3rd column width is 9 char\n```","summary":"<p>Holds curently max width for every column.</p>","abstract":false,"args":[{"name":"col_width_td","external_name":"col_width_td","restriction":""}],"args_string":"(col_width_td)","args_html":"(col_width_td)","location":{"filename":"src/top_down.cr","line_number":27,"url":null},"def":{"name":"col_width_td=","args":[{"name":"col_width_td","external_name":"col_width_td","restriction":""}],"visibility":"Public","body":"@col_width_td = col_width_td"}},{"html_id":"virtual_column_width_td(col_size:Int32):Array(Int32)-instance-method","name":"virtual_column_width_td","doc":"Calculate each column width for canvas with virtually col item of *col_size*.\n\nReturning the width of every column in type Array(Int32)\n\nExample:\n```\n@list = [\n  \"str_1\",\n  \"str_30\",\n  \"str_200\",\n  \"str_4000\",\n  \"str_50000\",\n]\nvirtual_column_width_td(3) # => [7, 9]\n\n# Virtual column would be like\n# str_1   str_4000\n# str_30  str_50000\n# str_200\n\nvirtual_column_width_td(2) # => [6, 8, 9]\n\n# Virtual column would be like\n# str_1  str_200  str_50000\n# str_30 str_4000\n```","summary":"<p>Calculate each column width for canvas with virtually col item of <em>col_size</em>.</p>","abstract":false,"args":[{"name":"col_size","external_name":"col_size","restriction":"Int32"}],"args_string":"(col_size : Int32) : Array(Int32)","args_html":"(col_size : Int32) : Array(Int32)","location":{"filename":"src/top_down.cr","line_number":55,"url":null},"def":{"name":"virtual_column_width_td","args":[{"name":"col_size","external_name":"col_size","restriction":"Int32"}],"return_type":"Array(Int32)","visibility":"Public","body":"ary = [] of Int32\n@canvas_td.clear\n@list.each_slice(col_size) do |col|\n  @canvas_td << col\n  ary << col.max_by do |elm|\n    elm.size\n  end.size\nend\nreturn ary\n"}},{"html_id":"virtual_one_column_td:Array(Array(String))-instance-method","name":"virtual_one_column_td","doc":"Return canvas with the size of one column.\nIts set @canvas_td and calculate the @col_width_td\n\nExample:\n```\n@list = [\n  \"str_1\",\n  \"str_30\",\n  \"str_200\",\n  \"str_4000\",\n  \"str_50000\",\n]\nvirtual_one_column_td # => [[\"str_1\", \"str_30\", \"str_200\", \"str_4000\", \"str_50000\"]]\n```","summary":"<p>Return canvas with the size of one column.</p>","abstract":false,"location":{"filename":"src/top_down.cr","line_number":81,"url":null},"def":{"name":"virtual_one_column_td","return_type":"Array(Array(String))","visibility":"Public","body":"cw = @list.max_of?(&.size)\n@col_width_td = cw ? [cw] : @col_width_td.clear\n@canvas_td.clear\n@canvas_td << @list\n"}}]}]}}