{"repository_name":"grid","body":"# grid\n\nA simple string grid formatter library for crystal programming language.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     grid:\n       github: Jeddi212/grid\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"grid\"\n\ngrid = Grid.new(\"Rubys Crystals Emeralds Sapphires\")\ngrid.virtual_generate(18) # 18 char is the max width of the canvas (not the column)  \ngrid.virtual_to_canvas\ngrid.to_s(true) # true [default | omittable] == top-down direction | false == left-right direction\n\n# Rubys    Emeralds \n# Crystals Sapphires\n\n```\n\n## Development\n\nWork in progress\n\n- [x] Auto grid\n\n- [ ] Direction\n\n   - [x] top-down\n   - [ ] left-right\n   \n- [ ] Custom header\n\n- [ ] Manual grid \n\n      - [ ] col & row size\n      - [ ] col width\n      - [ ] elipsis\n      - [ ] pass through\n\n## Contributing\n\n1. Fork it (<https://github.com/Jeddi212/grid/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Jeddi212](https://github.com/Jeddi212) - creator and maintainer\n\n<hr>\n\n![Jeddi's Profile Views](https://api.visitorbadge.io/api/visitors?path=https%3A%2F%2Fgithub.com%2FJeddi212&countColor=%23fce775&style=flat-square)\n","program":{"html_id":"grid/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"grid","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"grid/Grid","path":"Grid.html","kind":"struct","full_name":"Grid","name":"Grid","abstract":false,"superclass":{"html_id":"grid/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"grid/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"grid/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"grid/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/grid.cr","line_number":14,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L14"}],"repository_name":"grid","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"doc":"`Grid` is a simple string grid formatter library for crystal programming language.\n\nExample:\n\n```\ngrid = Grid.new(\"Rubys Crystals Emeralds Sapphires\")\ngrid.virtual_generate(18) # 18 char is the max width of the canvas (not the column)\ngrid.virtual_to_canvas\ngrid.to_s(true) # true [default | omittable] == top-down direction | false == left-right direction\n\n# Rubys    Emeralds\n# Crystals Sapphires\n```","summary":"<p><code><a href=\"Grid.html\">Grid</a></code> is a simple string grid formatter library for crystal programming language.</p>","constructors":[{"html_id":"new(list:Array(String))-class-method","name":"new","doc":"Initialize grid *list* with type of `Array(String)` as a input parameter.\nExample:\n\n```\nGrid.new([\"Ruby\", \"Crystal\", \"Emerald\", \"Sapphire\"])\n```","summary":"<p>Initialize grid <em>list</em> with type of <code>Array(String)</code> as a input parameter.</p>","abstract":false,"args":[{"name":"list","external_name":"list","restriction":"Array(String)"}],"args_string":"(list : Array(String))","args_html":"(list : Array(String))","location":{"filename":"src/grid.cr","line_number":79,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L79"},"def":{"name":"new","args":[{"name":"list","external_name":"list","restriction":"Array(String)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(list)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(str:String)-class-method","name":"new","doc":"Initialize grid *list* with type of `String` as a input parameter.\n\nExample:\n```\nGrid.new(\"Ruby Crystal Emerald Sapphire\")\n```","summary":"<p>Initialize grid <em>list</em> with type of <code>String</code> as a input parameter.</p>","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"}],"args_string":"(str : String)","args_html":"(str : String)","location":{"filename":"src/grid.cr","line_number":88,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L88"},"def":{"name":"new","args":[{"name":"str","external_name":"str","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(str)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"canvas:Array(Array(String))-instance-method","name":"canvas","doc":"Canvas is a variable that holds the cell of each string","summary":"<p>Canvas is a variable that holds the cell of each string</p>","abstract":false,"location":{"filename":"src/grid.cr","line_number":18,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L18"},"def":{"name":"canvas","visibility":"Public","body":"@canvas"}},{"html_id":"canvas=(canvas:Array(Array(String)))-instance-method","name":"canvas=","doc":"Canvas is a variable that holds the cell of each string","summary":"<p>Canvas is a variable that holds the cell of each string</p>","abstract":false,"args":[{"name":"canvas","external_name":"canvas","restriction":"::Array(::Array(::String))"}],"args_string":"(canvas : Array(Array(String)))","args_html":"(canvas : Array(Array(String)))","location":{"filename":"src/grid.cr","line_number":18,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L18"},"def":{"name":"canvas=","args":[{"name":"canvas","external_name":"canvas","restriction":"::Array(::Array(::String))"}],"visibility":"Public","body":"@canvas = canvas"}},{"html_id":"col_height:Array(Int32)-instance-method","name":"col_height","doc":"Holds curently max height for every column.\n\nExample:\n```\n@col_height = [4, 4, 3]\n\n# => 1st column height is 4 string\n# => 2nd column height is 4 string\n# => 3rd column height is 3 string\n```","summary":"<p>Holds curently max height for every column.</p>","abstract":false,"location":{"filename":"src/grid.cr","line_number":42,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L42"},"def":{"name":"col_height","visibility":"Public","body":"@col_height"}},{"html_id":"col_height=(col_height:Array(Int32))-instance-method","name":"col_height=","doc":"Holds curently max height for every column.\n\nExample:\n```\n@col_height = [4, 4, 3]\n\n# => 1st column height is 4 string\n# => 2nd column height is 4 string\n# => 3rd column height is 3 string\n```","summary":"<p>Holds curently max height for every column.</p>","abstract":false,"args":[{"name":"col_height","external_name":"col_height","restriction":"::Array(::Int32)"}],"args_string":"(col_height : Array(Int32))","args_html":"(col_height : Array(Int32))","location":{"filename":"src/grid.cr","line_number":42,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L42"},"def":{"name":"col_height=","args":[{"name":"col_height","external_name":"col_height","restriction":"::Array(::Int32)"}],"visibility":"Public","body":"@col_height = col_height"}},{"html_id":"col_width:Array(Int32)-instance-method","name":"col_width","doc":"Holds curently max width for every column.\n\nExample:\n```\n@col_width = [6, 7, 9]\n\n# => 1st column width is 6 char\n# => 2nd column width is 7 char\n# => 3rd column width is 9 char\n```","summary":"<p>Holds curently max width for every column.</p>","abstract":false,"location":{"filename":"src/grid.cr","line_number":30,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L30"},"def":{"name":"col_width","visibility":"Public","body":"@col_width"}},{"html_id":"col_width=(col_width:Array(Int32))-instance-method","name":"col_width=","doc":"Holds curently max width for every column.\n\nExample:\n```\n@col_width = [6, 7, 9]\n\n# => 1st column width is 6 char\n# => 2nd column width is 7 char\n# => 3rd column width is 9 char\n```","summary":"<p>Holds curently max width for every column.</p>","abstract":false,"args":[{"name":"col_width","external_name":"col_width","restriction":"::Array(::Int32)"}],"args_string":"(col_width : Array(Int32))","args_html":"(col_width : Array(Int32))","location":{"filename":"src/grid.cr","line_number":30,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L30"},"def":{"name":"col_width=","args":[{"name":"col_width","external_name":"col_width","restriction":"::Array(::Int32)"}],"visibility":"Public","body":"@col_width = col_width"}},{"html_id":"delimiter_count(i:Int32):Int32-instance-method","name":"delimiter_count","doc":"Count the delimiter of ranged column from range first to the specified index.\nExample:\n```\n# Say we have a list like this\n[[\"a\"], [\"b\"], [\"c\"]] # [0..1] ~> [[\"a\"], [\"b\"]]\ndelimiter_count(1)    # => 1\n```","summary":"<p>Count the delimiter of ranged column from range first to the specified index.</p>","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : Int32","args_html":"(i : Int32) : Int32","location":{"filename":"src/grid.cr","line_number":121,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L121"},"def":{"name":"delimiter_count","args":[{"name":"i","external_name":"i","restriction":"Int32"}],"return_type":"Int32","visibility":"Public","body":"col_size = @col_width[0..i].size\ncol_size < 1 ? 0 : col_size - 1\n"}},{"html_id":"delimiter_count:Int32-instance-method","name":"delimiter_count","doc":"Count the delimiter of the whole column.\nExample:\n```\n# Say we have a list like this\n[[\"a\"], [\"b\"], [\"c\"]]\ndelimiter_count # => 2\n```","summary":"<p>Count the delimiter of the whole column.</p>","abstract":false,"location":{"filename":"src/grid.cr","line_number":109,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L109"},"def":{"name":"delimiter_count","return_type":"Int32","visibility":"Public","body":"col_size = @col_width.size\ncol_size < 1 ? col_size : col_size - 1\n"}},{"html_id":"delimiter_count_of(col_count:Int32):Int32-instance-method","name":"delimiter_count_of","doc":"Count the delimiter of specified column count.\n\nExample:\n```\ndelimiter_count_of(3) # => 2\n```","summary":"<p>Count the delimiter of specified column count.</p>","abstract":false,"args":[{"name":"col_count","external_name":"col_count","restriction":"Int32"}],"args_string":"(col_count : Int32) : Int32","args_html":"(col_count : Int32) : Int32","location":{"filename":"src/grid.cr","line_number":98,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L98"},"def":{"name":"delimiter_count_of","args":[{"name":"col_count","external_name":"col_count","restriction":"Int32"}],"return_type":"Int32","visibility":"Public","body":"col_count < 1 ? 0 : col_count - 1"}},{"html_id":"flush(all:Bool=false)-instance-method","name":"flush","doc":"Flush all of the variable.\n\nExample:\n```\nflush\n# @canvas.clear\n# @col_height.clear\n# @col_width.clear\n# @max_height = 0\n# @max_width = 0\n```\n\nUse `flush(true)` will reset the *list* variable too.\n\nExample:\n```\nflush(true)\n# @canvas.clear\n# @col_height.clear\n# @col_width.clear\n# @max_height = 0\n# @max_width = 0\n# @list.clear\n```","summary":"<p>Flush all of the variable.</p>","abstract":false,"args":[{"name":"all","default_value":"false","external_name":"all","restriction":"Bool"}],"args_string":"(all : Bool = false)","args_html":"(all : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/grid.cr","line_number":150,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L150"},"def":{"name":"flush","args":[{"name":"all","default_value":"false","external_name":"all","restriction":"Bool"}],"visibility":"Public","body":"@canvas.clear\n@col_height.clear\n@col_width.clear\n@max_height = 0\n@max_width = 0\nif all\n  @list.clear\nend\nreturn\n"}},{"html_id":"highest_virtual_row:Int32-instance-method","name":"highest_virtual_row","doc":"Get the highest of col_height.\n\nExample:\n```\n@col_height = [4, 4, 3]\nhighest_virtual_row # => 4\n```","summary":"<p>Get the highest of col_height.</p>","abstract":false,"location":{"filename":"src/grid.cr","line_number":189,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L189"},"def":{"name":"highest_virtual_row","return_type":"Int32","visibility":"Public","body":"temp = @col_height.max?\ntemp ? temp : 0\n"}},{"html_id":"list:Array(String)-instance-method","name":"list","doc":"Holds the list of String from the user.\n\nExample:\n```\n#         this is 1st column   this is 2nd column\n\n@list = [[\"str_1\", \"str_2\"], [\"str_9\", \"str_8\"]]\n```","summary":"<p>Holds the list of String from the user.</p>","abstract":false,"location":{"filename":"src/grid.cr","line_number":71,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L71"},"def":{"name":"list","return_type":"Array(String)","visibility":"Public","body":"@list"}},{"html_id":"list=(list:Array(String))-instance-method","name":"list=","doc":"Holds the list of String from the user.\n\nExample:\n```\n#         this is 1st column   this is 2nd column\n\n@list = [[\"str_1\", \"str_2\"], [\"str_9\", \"str_8\"]]\n```","summary":"<p>Holds the list of String from the user.</p>","abstract":false,"args":[{"name":"list","external_name":"list","restriction":"Array(String)"}],"args_string":"(list : Array(String))","args_html":"(list : Array(String))","location":{"filename":"src/grid.cr","line_number":71,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L71"},"def":{"name":"list=","args":[{"name":"list","external_name":"list","restriction":"Array(String)"}],"visibility":"Public","body":"@list = list"}},{"html_id":"max_height:Int32-instance-method","name":"max_height","doc":"Holds the currently highest column value.\n\nExample:\n```\n@canvas = [\n  [\"a\", \"b\", \"c\"], # => column 1 :: has row 3\n  [\"d\", \"e\"],      # => column 2 :: has row 2\n]\n\n# so the highest row is 3\n# and its became the value of @max_height\n```","summary":"<p>Holds the currently highest column value.</p>","abstract":false,"location":{"filename":"src/grid.cr","line_number":61,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L61"},"def":{"name":"max_height","visibility":"Public","body":"@max_height"}},{"html_id":"max_height=(max_height:Int32)-instance-method","name":"max_height=","doc":"Holds the currently highest column value.\n\nExample:\n```\n@canvas = [\n  [\"a\", \"b\", \"c\"], # => column 1 :: has row 3\n  [\"d\", \"e\"],      # => column 2 :: has row 2\n]\n\n# so the highest row is 3\n# and its became the value of @max_height\n```","summary":"<p>Holds the currently highest column value.</p>","abstract":false,"args":[{"name":"max_height","external_name":"max_height","restriction":"::Int32"}],"args_string":"(max_height : Int32)","args_html":"(max_height : Int32)","location":{"filename":"src/grid.cr","line_number":61,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L61"},"def":{"name":"max_height=","args":[{"name":"max_height","external_name":"max_height","restriction":"::Int32"}],"visibility":"Public","body":"@max_height = max_height"}},{"html_id":"max_width:Int32-instance-method","name":"max_width","doc":"Holds the max width of the canvas.\nIts defined by the user.\nDefault value is `24`.","summary":"<p>Holds the max width of the canvas.</p>","abstract":false,"location":{"filename":"src/grid.cr","line_number":47,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L47"},"def":{"name":"max_width","visibility":"Public","body":"@max_width"}},{"html_id":"max_width=(max_width:Int32)-instance-method","name":"max_width=","doc":"Holds the max width of the canvas.\nIts defined by the user.\nDefault value is `24`.","summary":"<p>Holds the max width of the canvas.</p>","abstract":false,"args":[{"name":"max_width","external_name":"max_width","restriction":"::Int32"}],"args_string":"(max_width : Int32)","args_html":"(max_width : Int32)","location":{"filename":"src/grid.cr","line_number":47,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L47"},"def":{"name":"max_width=","args":[{"name":"max_width","external_name":"max_width","restriction":"::Int32"}],"visibility":"Public","body":"@max_width = max_width"}},{"html_id":"to_s(align_left=true,separator=\"\"):String-instance-method","name":"to_s","doc":"Convert all elements in *canvas* to a single string using `String#build`.\n\nExample:\n\n```\ngrid = Grid.new(\"Rubys Crystals Emeralds Sapphires\")\ngrid.virtual_generate\ngrid.virtual_to_canvas\ngrid.to_s\n\n# Rubys    Emeralds\n# Crystals Sapphires\n```","summary":"<p>Convert all elements in <em>canvas</em> to a single string using <code>String#build</code>.</p>","abstract":false,"args":[{"name":"align_left","default_value":"true","external_name":"align_left","restriction":""},{"name":"separator","default_value":"\" \"","external_name":"separator","restriction":""}],"args_string":"(align_left = true, separator = \" \") : String","args_html":"(align_left = <span class=\"n\">true</span>, separator = <span class=\"s\">&quot; &quot;</span>) : String","location":{"filename":"src/grid.cr","line_number":207,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L207"},"def":{"name":"to_s","args":[{"name":"align_left","default_value":"true","external_name":"align_left","restriction":""},{"name":"separator","default_value":"\" \"","external_name":"separator","restriction":""}],"return_type":"String","visibility":"Public","body":"String.build do |io|\n  if align_left\n    max_height.times do |row|\n      col_width.each_with_index do |width, col|\n        if row < col_height[col]\n          io << (canvas[col][row].ljust(width, ' '))\n        end\n        if col < (col_width.size - 1)\n          io << separator\n        end\n      end\n      io << \"\\n\"\n    end\n  end\nend"}},{"html_id":"virtual_column_width(virtual_index:Int32,virtual_row:Int32):Tuple(Array(Int32),Int32)-instance-method","name":"virtual_column_width","doc":"Calculate column width for canvas virtually to the range of data.\n\nReturning the width of every column in an array, plus the column height of the last column\n\nExample:\n```\n@list = [\n  \"str_1\",\n  \"str_30\",\n  \"str_200\",\n  \"str_4000\",\n  \"str_50000\",\n]\nvirtual_column_width(4, 3) # => { [7, 9], 2 }\n\n# Virtual column would be like\n# str_1   str_4000\n# str_30  str_50000\n# str_200\n\nvirtual_column_width(3, 2) # => { [6, 7], 1 }\n\n# Virtual column would be like\n# str_1  str_200\n# str_30\n```\n\nIf virtual_index argument is larger than *list* size, than it will use the *list* size instead.\nNOTE: virtual index is act like an index `its starts from 0`\nExample:\n```\n@list = [\n  \"str_1\",\n  \"str_30\",\n  \"str_200\",\n  \"str_4000\",\n  \"str_50000\",\n]\n\nvirtual_column_width(100, 3) # => { [7, 9], 2 }\n\n# Virtual column would be like\n# str_1   str_4000\n# str_30  str_50000\n# str_200\n```\n\nHeight parameter act same like virtual_index.\nExample:\n```\n@list = [\n  \"str_1\",\n  \"str_30\",\n  \"str_200\",\n  \"str_4000\",\n  \"str_50000\",\n]\n\nvirtual_column_width(4, 100) # => { [9], 5 }\n\n# Virtual column would be like\n# str_1\n# str_30\n# str_200\n# str_4000\n# str_50000\n```","summary":"<p>Calculate column width for canvas virtually to the range of data.</p>","abstract":false,"args":[{"name":"virtual_index","external_name":"virtual_index","restriction":"Int32"},{"name":"virtual_row","external_name":"virtual_row","restriction":"Int32"}],"args_string":"(virtual_index : Int32, virtual_row : Int32) : Tuple(Array(Int32), Int32)","args_html":"(virtual_index : Int32, virtual_row : Int32) : Tuple(Array(Int32), Int32)","location":{"filename":"src/grid.cr","line_number":288,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L288"},"def":{"name":"virtual_column_width","args":[{"name":"virtual_index","external_name":"virtual_index","restriction":"Int32"},{"name":"virtual_row","external_name":"virtual_row","restriction":"Int32"}],"return_type":"Tuple(Array(Int32), Int32)","visibility":"Public","body":"virtual_index = virtual_index > @list.size ? -1 : virtual_index\nlast_col_height = 0\nary = (@list[0..virtual_index].each_slice(virtual_row)).map do |new_col|\n  last_col_height = new_col.size\n  new_col.max_by do |elm|\n    elm.size\n  end.size\nend.to_a\nreturn {ary, last_col_height}\n"}},{"html_id":"virtual_generate(max_w:Int32=24)-instance-method","name":"virtual_generate","doc":"Generate the virtual canvas based on the current *list* and specified *max width*.\nThe max width default value is 24.\n\nExample:\n```\n@canvas = [] of Array(String)\n@list = [\"str_1\", \"str_30\", \"str_200\", \"str_4000\", \"str_50000\"]\n\nvirtual_generate # generate our virtual canvas with default value of @max_width = 24\n\n# Then our virtual_canvas are\n@col_width = [7, 9]\n@col_height = [3, 2]\n\n# str_1   str_4000\n# str_30  str_50000\n# str_200\n\nvirtual_generate(25) # generate our virtual canvas @max_width = 25\n\nThen our virtual_canvas are\n@col_width = [7, 9]\n@col_height = [3, 2]\n\n# str_1  str_200  str_50000\n# str_30 str_4000\n```\n\nNOTE: currently only support top-down direction","summary":"<p>Generate the virtual canvas based on the current <em>list</em> and specified <em>max width</em>.</p>","abstract":false,"args":[{"name":"max_w","default_value":"24","external_name":"max_w","restriction":"::Int32"}],"args_string":"(max_w : Int32 = 24)","args_html":"(max_w : Int32 = <span class=\"n\">24</span>)","location":{"filename":"src/grid.cr","line_number":356,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L356"},"def":{"name":"virtual_generate","args":[{"name":"max_w","default_value":"24","external_name":"max_w","restriction":"::Int32"}],"visibility":"Public","body":"flush\n@max_width = max_w\n@list.each_with_index do |str, i|\n  if str.size >= @max_width\n    virtual_one_column\n    return\n  end\n  if @col_height.empty? || @col_height.last >= highest_virtual_row\n    if (get_next_width(str)) < @max_width\n      @col_height << 1\n      @col_width << str.size\n      @max_height = highest_virtual_row\n    else\n      if virtual_rearrange(str, i)\n      else\n        virtual_one_column\n        return\n      end\n    end\n  else\n    if (get_next_width(str, -2)) < @max_width\n      @col_height[-1] = @col_height[-1] + 1\n      if str.size > @col_width[-1]\n        @col_width[-1] = str.size\n      end\n    else\n      if virtual_rearrange(str, i)\n      else\n        virtual_one_column\n        return\n      end\n    end\n  end\nend\n"}},{"html_id":"virtual_one_column-instance-method","name":"virtual_one_column","doc":"Calculate the row & height to the one column sized.\n\nExample:\n```\n@list = [\n  \"str_1\",\n  \"str_3\",\n  \"str_2\",\n  \"str_4\",\n  \"str_5\",\n  \"str_6\",\n  \"str_7\",\n]\n\nvirtual_one_column\n# @col_width = [5]\n# @col_height = [7]\n```","summary":"<p>Calculate the row &amp; height to the one column sized.</p>","abstract":false,"location":{"filename":"src/grid.cr","line_number":318,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L318"},"def":{"name":"virtual_one_column","visibility":"Public","body":"@canvas.clear\n@col_width.clear\n@col_width << @list.max_by do |elm|\n  elm.size\nend.size\n@max_height = @list.size\n@col_height = [@max_height]\nreturn\n"}},{"html_id":"virtual_to_canvas:Array(Array(String))-instance-method","name":"virtual_to_canvas","doc":"Install the *list* to the *canvas* based on the virtual_canvas.\n\nExample:\n```\n@canvas = [] of Array(String)\n@list = [\"str_1\", \"str_30\", \"str_200\", \"str_4000\", \"str_50000\"]\n\n# Then our virtual_canvas are\n@col_width = [7, 9]\n@col_height = [3, 2]\n\n# Then we call `virtual_to_canvas`\nvirtual_to_canvas\n\n# Our canvas would be like this\n@canvas = [\n  [\"str_1\", \"str_30\", \"str_200\"], # this is column 1\n  [\"str_4000\", \"str_50000\"],      # this is column 2\n]\n```","summary":"<p>Install the <em>list</em> to the <em>canvas</em> based on the virtual_canvas.</p>","abstract":false,"location":{"filename":"src/grid.cr","line_number":445,"url":"https://github.com/Jeddi212/grid/blob/b9ee0e91122bdbe68c4f6ae9cba968af27bdf775/src/grid.cr#L445"},"def":{"name":"virtual_to_canvas","return_type":"Array(Array(String))","visibility":"Public","body":"virtual_row = highest_virtual_row > 0 ? highest_virtual_row : 1\n@canvas = (@list.each_slice(virtual_row)).map do |col|\n  col\nend.to_a\n"}}]}]}}